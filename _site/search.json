[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post.Welcome"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HomePage",
    "section": "",
    "text": "ggpattern: ggplot2 with geometric texture amd images\n\n\n\n\n\n\ngraphics\n\n\nbar charts\n\n\n\n\n\n\n\n\n\nSep 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nggforce: 圆角柱状图\n\n\n\n\n\n\ngraphics\n\n\nbar charts\n\n\n\n\n\n\n\n\n\nSep 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\niterated function system\n\n\n\n\n\n\ngraphics\n\n\nart\n\n\n\n\n\n\n\n\n\nSep 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nwelcome\n\n\n\n\n\n\n\n\n\nSep 23, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "iterated function system",
    "section": "",
    "text": "library(Rcpp)\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(dplyr)\nlibrary(ggthemes)\nlibrary(tictoc)\n\n\nfern_transform &lt;- function(coord, ind) {\n  \n  # coefficients for the stem function f_1\n  if(ind == 1) {\n    mat &lt;- matrix(c(0, 0, 0, .16), 2, 2) # matrix to multiply\n    off &lt;- c(0, 0)                       # offset vector to add\n  }\n  \n  # coefficients for the small leaflet function f_2\n  if(ind == 2) {\n    mat &lt;- matrix(c(.85, -.04, .04, .85), 2, 2)\n    off &lt;- c(0, 1.6)                      \n  }\n  # coefficients for the right-side function f_3\n  if(ind == 3) {\n    mat &lt;- matrix(c(.2, .23, -.26, .22), 2, 2)\n    off &lt;- c(0, 1.6)                      \n  }\n  \n  # coefficients for the left-side function f_4\n  if(ind == 4) {\n    mat &lt;- matrix(c(-.15, .26, .28, .24), 2, 2)\n    off &lt;- c(0, .44)                     \n  }\n  \n  # return the affine transformed coords\n  coord &lt;- mat %*% coord + off\n  return(coord)\n}\n\n\nfern_chaos &lt;- function(iterations = 10000, seed = NULL) {\n  if(!is.null(seed)) set.seed(seed)\n  \n  # which transformation to apply at each iteration\n  transform_index &lt;- sample(\n    x = 1:4, \n    size = iterations, \n    replace= TRUE, \n    prob = c(.01, .85, .07, .07)\n  )\n  \n  # initialise chaos game at the origin\n  start &lt;- matrix(c(0, 0))\n  \n  # helper function to collapse accumulated output\n  bind_to_column_matrix &lt;- function(lst) {\n    do.call(cbind, lst)\n  }\n  \n  # iterate until done!\n  coord_matrix &lt;- transform_index |&gt;\n    accumulate(fern_transform, .init = start) |&gt;\n    bind_to_column_matrix() \n  \n  # tidy the output, add extra columns, and return\n  coord_df &lt;- t(coord_matrix) |&gt; \n    as.data.frame() \n  names(coord_df) &lt;- c(\"x\", \"y\")\n  coord_df &lt;- coord_df |&gt;\n    as_tibble() |&gt;\n    mutate(\n      transform = c(0, transform_index),\n      iteration = row_number() - 1\n    )\n  return(coord_df)\n}\n\n\nfern_dat &lt;- fern_chaos(seed = 1)\nfern_dat %&gt;% head()\n\n# A tibble: 6 × 4\n       x     y transform iteration\n   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1  0      0            0         0\n2  0      1.6          2         1\n3  0.064  2.96         2         2\n4  0.173  4.11         2         3\n5 -1.03   2.54         3         4\n6 -0.778  3.80         2         5\n\n\n\nggplot(fern_dat, aes(x, y)) +\n  geom_point(colour = \"yellow\", size = 1, stroke = 0) +\n  coord_equal() +\n  theme_void()\n\n\n\n\n\n\n\n\n\nggplot(fern_dat, aes(x, y, colour = iteration)) +\n  geom_point(size = 1, stroke = 0, show.legend = FALSE) +\n  coord_equal() +\n  theme_void()"
  },
  {
    "objectID": "posts/iterated function system/index.html",
    "href": "posts/iterated function system/index.html",
    "title": "iterated function system",
    "section": "",
    "text": "Art code\n\nShow the codelibrary(Rcpp)\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(dplyr)\nlibrary(ggthemes)\nlibrary(tictoc)\n\n\n\nShow the codefern_transform &lt;- function(coord, ind) {\n  \n  # coefficients for the stem function f_1\n  if(ind == 1) {\n    mat &lt;- matrix(c(0, 0, 0, .16), 2, 2) # matrix to multiply\n    off &lt;- c(0, 0)                       # offset vector to add\n  }\n  \n  # coefficients for the small leaflet function f_2\n  if(ind == 2) {\n    mat &lt;- matrix(c(.85, -.04, .04, .85), 2, 2)\n    off &lt;- c(0, 1.6)                      \n  }\n  # coefficients for the right-side function f_3\n  if(ind == 3) {\n    mat &lt;- matrix(c(.2, .23, -.26, .22), 2, 2)\n    off &lt;- c(0, 1.6)                      \n  }\n  \n  # coefficients for the left-side function f_4\n  if(ind == 4) {\n    mat &lt;- matrix(c(-.15, .26, .28, .24), 2, 2)\n    off &lt;- c(0, .44)                     \n  }\n  \n  # return the affine transformed coords\n  coord &lt;- mat %*% coord + off\n  return(coord)\n}\n\n\n\nShow the codefern_chaos &lt;- function(iterations = 10000, seed = NULL) {\n  if(!is.null(seed)) set.seed(seed)\n  \n  # which transformation to apply at each iteration\n  transform_index &lt;- sample(\n    x = 1:4, \n    size = iterations, \n    replace= TRUE, \n    prob = c(.01, .85, .07, .07)\n  )\n  \n  # initialise chaos game at the origin\n  start &lt;- matrix(c(0, 0))\n  \n  # helper function to collapse accumulated output\n  bind_to_column_matrix &lt;- function(lst) {\n    do.call(cbind, lst)\n  }\n  \n  # iterate until done!\n  coord_matrix &lt;- transform_index |&gt;\n    accumulate(fern_transform, .init = start) |&gt;\n    bind_to_column_matrix() \n  \n  # tidy the output, add extra columns, and return\n  coord_df &lt;- t(coord_matrix) |&gt; \n    as.data.frame() \n  names(coord_df) &lt;- c(\"x\", \"y\")\n  coord_df &lt;- coord_df |&gt;\n    as_tibble() |&gt;\n    mutate(\n      transform = c(0, transform_index),\n      iteration = row_number() - 1\n    )\n  return(coord_df)\n}\n\n\n\nShow the codefern_dat &lt;- fern_chaos(seed = 1)\nfern_dat %&gt;% head()\n\n# A tibble: 6 × 4\n       x     y transform iteration\n   &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1  0      0            0         0\n2  0      1.6          2         1\n3  0.064  2.96         2         2\n4  0.173  4.11         2         3\n5 -1.03   2.54         3         4\n6 -0.778  3.80         2         5\n\n\n\nShow the codeggplot(fern_dat, aes(x, y)) +\n  geom_point(colour = \"yellow\", size = 1, stroke = 0) +\n  coord_equal() +\n  theme_void()\n\n\n\n\n\n\n\n\nShow the codeggplot(fern_dat, aes(x, y, colour = iteration)) +\n  geom_point(size = 1, stroke = 0, show.legend = FALSE) +\n  coord_equal() +\n  theme_void()"
  },
  {
    "objectID": "posts/ggpattern/index.html",
    "href": "posts/ggpattern/index.html",
    "title": "ggpattern: ggplot2 with geometric texture amd images",
    "section": "",
    "text": "Show the codelibrary(ggplot2)\nlibrary(patchwork)\nlibrary(ggpattern)\nlibrary(gridpattern)\n\n\n\nShow the codeset.seed(123)\ndf &lt;- tibble(\n    group = letters[1:5],\n    value = round(runif(5,min = 10,max = 100),digits = 0)\n)\n\ndf %&gt;% \n    ggplot(mapping = aes(x = group, y = value, fill = group)) +\n    geom_col()"
  },
  {
    "objectID": "posts/ggpattern/index.html#先决条件",
    "href": "posts/ggpattern/index.html#先决条件",
    "title": "ggpattern: ggplot2 with geometric texture amd images",
    "section": "",
    "text": "Show the codelibrary(ggplot2)\nlibrary(patchwork)\nlibrary(ggpattern)\nlibrary(gridpattern)\n\n\n\nShow the codeset.seed(123)\ndf &lt;- tibble(\n    group = letters[1:5],\n    value = round(runif(5,min = 10,max = 100),digits = 0)\n)\n\ndf %&gt;% \n    ggplot(mapping = aes(x = group, y = value, fill = group)) +\n    geom_col()"
  },
  {
    "objectID": "posts/ggpattern/index.html#ggpattern",
    "href": "posts/ggpattern/index.html#ggpattern",
    "title": "ggpattern: ggplot2 with geometric texture amd images",
    "section": "ggpattern",
    "text": "ggpattern\n几何纹理\n\nShow the codenames_magick_stripe\n\n [1] \"crosshatch\"    \"crosshatch30\"  \"crosshatch45\"  \"horizontal\"   \n [5] \"horizontal2\"   \"horizontal3\"   \"hs_bdiagonal\"  \"hs_cross\"     \n [9] \"hs_diagcross\"  \"hs_fdiagonal\"  \"hs_horizontal\" \"hs_vertical\"  \n[13] \"left30\"        \"left45\"        \"right30\"       \"right45\"      \n[17] \"vertical\"      \"vertical2\"     \"vertical3\"    \n\nShow the codenames_hex\n\n[1] \"hex\"      \"hex1\"     \"hex2\"     \"hex3\"     \"hex_skew\"\n\nShow the codenames_pattern\n\n [1] \"ambient\"         \"circle\"          \"crosshatch\"      \"fill\"           \n [5] \"gradient\"        \"image\"           \"magick\"          \"none\"           \n [9] \"pch\"             \"placeholder\"     \"plasma\"          \"polygon_tiling\" \n[13] \"regular_polygon\" \"rose\"            \"stripe\"          \"text\"           \n[17] \"wave\"            \"weave\"          \n\n\n 'stripe' (default), 'crosshatch', 'pch', 'circle', 'none'\n\nShow the codep1 &lt;- ggplot(df, aes(group, value )) +\n  geom_col_pattern(pattern = \"stripe\", \n                   fill= \"white\",  # 条形背景色 \n                   color=\"red\",    # 条形边框色\n                   pattern_fill = \"skyblue\", # 几何纹理填充色\n                   pattern_colour=\"darkgreen\",\n                   pattern_angle =30,    # 旋转角度\n                   pattern_linetype= 3 ,# 笔划stroke 线型\n                   pattern_size= 1.2,   #笔画线宽\n                   ) +\n    ggtitle(\"线条：stripe\")\n\np2 &lt;- ggplot(df, aes(group, value )) +\n  geom_col_pattern(pattern = \"crosshatch\", \n                   fill= \"white\",  # 条形背景色 \n                   color=\"red\",    # 条形边框色\n                   pattern_fill = \"red\", # 几何纹理填充色\n                   pattern_colour=\"green\",\n                   pattern_angle =30 ,  # 角度\n                   pattern_spacing= 0.2\n                   ) +\n    ggtitle(\"交叉平行线：crosshatch\")\n\n\np3 &lt;- ggplot(df, aes(group, value )) +\n  geom_col_pattern(pattern = \"pch\",\n                   fill= \"white\",  # 条形背景色 \n                   color=\"red\",    # 条形边框色\n                   pattern_colour=\"green\",\n                   pattern_angle =30,  \n                   pattern_density = 1,\n                   ) +\n    ggtitle(\"点：pch\")\n\np4 &lt;- ggplot(df, aes(group, value )) +\n  geom_col_pattern(pattern = \"circle\",\n                   fill= \"white\",  # 条形背景色 \n                   color=\"red\",    # 条形边框色\n                   pattern_colour=\"darkgreen\",\n                   pattern_fill = \"skyblue\",\n                   pattern_angle =30,   # 角度\n                   pattern_density = 1,\n                   pattern_spacing= 0.2, # 间距\n                   ) +\n    ggtitle(\"圈：circle\")\n\n(p1+p2)/(p3+p4)\n\n\n\n\n\n\n\n波浪图案\n\nShow the codex_hex &lt;- 0.5 + 0.5 * cos(seq(2 * pi / 4, by = 2 * pi / 6, length.out = 6))\ny_hex &lt;- 0.5 + 0.5 * sin(seq(2 * pi / 4, by = 2 * pi / 6, length.out = 6))\ngrid::grid.newpage()\nwave_sine &lt;- grid.pattern_wave(x_hex, y_hex, colour = \"black\", type = \"sine\",\n                  fill = c(\"red\", \"blue\"), density = 0.4,\n                  spacing = 0.15, angle = 0,\n                  amplitude = 0.05, frequency = 1 / 0.20)\n\n\n\n\n\n\nShow the code# zig-zag pattern is a wave of \"type = triangle\"\ngrid::grid.newpage()\nwave_triangle &lt;- grid.pattern_wave(x_hex, y_hex, colour = \"black\", \n                                   type = \"triangle\",\n                    fill = c(\"red\", \"blue\"), density = 0.4,\n                    spacing = 0.15, angle = 0, amplitude = 0.075)\n\n\n\n\n\n\n\n编织类型\npattern_type= ,\npattern_subtype=\n\nShow the codenames_weave\n\n [1] \"basket\"            \"matt\"              \"matt_irregular\"   \n [4] \"plain\"             \"rib_warp\"          \"satin\"            \n [7] \"twill\"             \"twill_elongated\"   \"twill_herringbone\"\n[10] \"twill_zigzag\"     \n\n\n\nShow the codeggplot(df, aes(group, value)) +\n  geom_col_pattern(\n    aes(pattern_fill2=group, pattern_type=group),\n    pattern = 'weave',\n    colour = 'black', \n    pattern_density = 1.0,\n    pattern_fill = 'grey',\n    pattern_key_scale_factor = 0.5,\n  ) +\n  theme_bw() +\n  labs(title = \"Some 'weave' types\") + \n  scale_pattern_type_manual(values=c('plain','matt', 'twill_herringbone',\n                                     \"twill_zigzag\",'satin')) +\n  theme(legend.key.size = unit(1.5, 'cm'))\n\n\n\n\n\n\n\n混合模式\n\nShow the codeggplot(df, aes(group, value)) +\n  geom_col_pattern(aes(fill=group, pattern=group, pattern_type=group),colour='black') + \n  theme_bw() +\n  labs(title = \"Use 'stripe' and 'weave' patterns\") + \n  theme(legend.key.size = unit(1.5, 'cm')) +\n  scale_pattern_manual(values=c('stripe', 'weave', 'weave','stripe', 'weave')) +\n  scale_pattern_type_manual(values=c(NA, 'basket', 'matt', NA, 'twill_elongated'))\n\n\n\n\n\n\n\n\nShow the codelibrary(ggplot2)\nlibrary(ggpattern)\nToothGrowth$dose &lt;- factor(ToothGrowth$dose)\nggplot(ToothGrowth, aes(dose)) +\n  geom_bar_pattern(aes(fill=dose, pattern=dose, pattern_type=dose),colour='black') + \n  theme_bw() +\n  labs(title = \"Use 'stripe' and 'wave' patterns\") + \n  theme(legend.key.size = unit(1.5, 'cm')) +\n  scale_pattern_manual(values=c('stripe', 'wave', 'wave')) +\n  scale_pattern_type_manual(values=c(NA, 'triangle', 'sine'))"
  },
  {
    "objectID": "posts/圆角条形图/index.html",
    "href": "posts/圆角条形图/index.html",
    "title": "ggforce: 圆角柱状图",
    "section": "",
    "text": "Show the codelibrary(ggforce)"
  },
  {
    "objectID": "posts/圆角条形图/index.html#先决条件",
    "href": "posts/圆角条形图/index.html#先决条件",
    "title": "ggforce: 圆角柱状图",
    "section": "",
    "text": "Show the codelibrary(ggforce)"
  },
  {
    "objectID": "posts/圆角条形图/index.html#geom_shape",
    "href": "posts/圆角条形图/index.html#geom_shape",
    "title": "ggforce: 圆角柱状图",
    "section": "geom_shape()",
    "text": "geom_shape()\n连续X\n\nShow the codeshape &lt;- data.frame(\n  x = c(0.25, 0.75,0.75,0.25),\n  y = c(0, 0,1,1)\n)\n\nggplot(shape, aes(x = x, y = y)) +\n  #geom_polygon(fill = 'red') +\n  geom_shape(radius = unit(0.5, 'cm'))+\n    scale_x_continuous(breaks = seq(0,2,1), limits = c(0,2))\n\n\n\n\n\n\n\n分类X\n\nShow the codedf &lt;- data.frame(trt = c(\"a\", \"b\", \"c\"), outcome = c(2.3, 1.9, 3.2))\n\nwidth &lt;- .9\n\ndf &lt;- df |&gt;\n    mutate(trt = factor(trt)) |&gt;\n    dplyr::reframe(\n        data.frame(\n            x = rep(as.numeric(trt) + width / 2 * c(-1, 1), each = 2), # 指定条形图四个角的坐标\n            outcome = c(c(0, outcome), rev(c(0, outcome)))\n        ),\n        .by = trt\n    )\ndf\n\n   trt    x outcome\n1    a 0.55     0.0\n2    a 0.55     2.3\n3    a 1.45     2.3\n4    a 1.45     0.0\n5    b 1.55     0.0\n6    b 1.55     1.9\n7    b 2.45     1.9\n8    b 2.45     0.0\n9    c 2.55     0.0\n10   c 2.55     3.2\n11   c 3.45     3.2\n12   c 3.45     0.0\n\nShow the codeggplot(df, aes(x, outcome, fill = trt)) +\n    geom_shape(radius = .05)+\n    scale_x_continuous(breaks = 1:3,labels = c(\"a\",\"b\",\"c\"))+\n    theme(\n        axis.title.x = element_blank()\n    )\n\n\n\n\n\n\n\n\nShow the codelibrary(ggforce)\nggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) +\n  geom_point() +\n  facet_zoom(x = Species == \"versicolor\")"
  }
]